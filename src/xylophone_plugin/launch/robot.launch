<launch>
    <arg name="robot_name" default="msj_platform"/>
    <arg name="start_controllers" default="sphere_axis0 sphere_axis1 sphere_axis2"/>
    <arg name="gazebo" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="false"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="xylophone" default="false"/>

    <param name="robot_name" type="string" value="$(arg robot_name)"  />

    <!--XYLOPHONE MODEL-->
    <!--<param name="robot_description" textfile="$(find roboy_models)/roboy_xylophone/model.urdf" />-->
    <!--<param name="urdf_file_path" type="string" value="$(find roboy_models)/roboy_xylophone/model.urdf" />-->
    <!--<param name="cardsflow_xml" type="string" value="$(find roboy_models)/roboy_xylophone/cardsflow.xml" />-->
    <!--<rosparam file="$(find roboy_models)/roboy_xylophone/config/controller.yaml" command="load"/>-->
    <!--<rosparam file="$(find roboy_models)/roboy_xylophone/config/endeffectors.yaml" command="load"/>-->

    <!--UPPER BODY MODEL-->
    <param name="robot_description" textfile="$(find robots)/$(arg robot_name)/model.urdf" />
    <param name="urdf_file_path" type="string" value="$(find robots)/$(arg robot_name)/model.urdf" />
    <param name="cardsflow_xml" type="string" value="$(find robots)/$(arg robot_name)/cardsflow.xml" />
    <rosparam file="$(find robots)/$(arg robot_name)/config/controller.yaml" command="load"/>
    <rosparam file="$(find robots)/$(arg robot_name)/config/endeffectors.yaml" command="load"/>

    <param name="Kp" type="double" value="100"  />
    <param name="Kd" type="double" value="10"  />
    <rosparam param="q_target">[0.0, 0.0, 0.0]</rosparam>
    <param name="min_force" type="double" value="0"  />
    <param name="max_force" type="double" value="500"  />
    <param name="controller" type="int" value="2"  />
    <param name="gazebo" type="bool" value="$(arg gazebo)"/>
    <node name="controller_manager"
          pkg="controller_manager"
          type="spawner"
          args="$(arg start_controllers)" />
    <!--<node name="controller_manager"-->
          <!--pkg="controller_manager"-->
          <!--type="spawner"-->
          <!--args="hip_joint elbow_left_rot1 elbow_right_rot1 elbow_left_rot0 elbow_right_rot0-->
          <!--sphere_left_axis0 sphere_left_axis1 sphere_left_axis2 sphere_right_axis0 sphere_right_axis1 sphere_right_axis2-->
          <!--sphere_head_axis0 sphere_head_axis1 sphere_head_axis2" />-->

    <node name="robot_controller"
          pkg="kindyn"
          type="$(arg robot_name)"
          respawn="false"
          output="screen"
          launch-prefix="gdb -ex run"
    />

    <group if="$(arg gazebo)">
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="debug" value="$(arg debug)"/>
            <arg name="gui" value="$(arg gui)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="headless" value="$(arg headless)"/>
        </include>
        <!--node name="robot_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
              args="-sdf -file $(find robots)/$(arg model_name)/model.sdf -model $(arg model_name)"
        /-->
        <group if="$(arg xylophone)">
            <node name="sdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                  args="-sdf -file $(find roboy_models)/xylophone/model.sdf -model xylophone
                              -x 0.0 -y -0.4 -z 0.05
                              -R 0.0 -P 0 -Y +3.07"
            />
        </group>
    </group>

    <node pkg="tf" type="static_transform_publisher" name="static_map" args="0 0 0 0 0 0 1.  /map /world  0.01"/>

</launch>
        <!--launch-prefix="gdb -ex run"-->
        <!--launch-prefix="gdb -ex run"-->
        <!-- FOR DEBUGGING USE THIS launch-prefix="xterm -e gdb -se devel/lib/myo_master/multiJoint" FOR VALGRIND USE THIS launch-prefix="valgrind -log-file=/home/roboy/workspace/ros_hierarchy/valgrind.log -leak-check=full"-->

        <!-- args="-c /home/roboy/workspace/roboy-ros-control/src/roboy_powerlink/powerlink/output/mnobd.cdc"-->